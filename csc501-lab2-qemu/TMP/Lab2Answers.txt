1.The priority inversion problem could cause that a higher-priority process needs to wait for the completion of a lower-priority process.
      1.Priority inheritance is one approach to address this issue. Please give another approach and briefly describe its idea.
      2.Design a test case to show that your approach can address the priority inversion problem. You should compare the results
      that derived from the original XINU implementation (use semaphore) and that derived from your implementation (use readers/writer locks).
      Put your results in Lab2Answers.txt and your test case program (name it task1.c) in both ./sys and ./TMP

      1.random boosting
      The priority of ready threads holding locks could be boosted randomly and then allowed to run to exit the critical section.
      If the thread doesn't get enough time to exit, it will get another chance later.

      2.
		set writer A priority 20, set writer B priority 30, set writer C priority 25.
		A hold the lock at first. B then try to acquire the lock, A's priority should be boosted to 30 which is the same as B. then C has to wait until A and B release the lock.
		as for the semaphore without priority inheritance, C would preempt A directly.

lock with priority inheritance
 A : to acquire lock
 A : acquired lock 
 B : to acquire lock
 A : to release lock
 B : acquired lock 
 B : to release lock
 C start to write
 C write done.
semaphore without priority inheritance
 A : to wait
 A : wait
 B : to wait
 C start to write
 C write done.
 A : to signal
 B : wait
 B : to signal



2.Synchronization is a quite complex issue in operating systems. To show your understanding about process synchronization,
you are asked to point out a reader/writer synchronization issue in this pesudo-code: task2_sync_issue.c.
Multiple reader threads can execute this code concurrently by calling do_update.
All the variables starting with global_ are global variables.
You are asked to describe the potential issue caused by the incorrect synchronization
and point out at least one possible thread interleaving that would trigger the problem. Put your answer in Lab2Answers.txt mentioned above.

The function buffer_add is actually a writer process, as for the try_update, the code statement use a counting semaphore which is initialized to 10, cannot protect the critical section. And the do_update function use a reader lock to lock the process, which will allow other threads to execute at same time.
